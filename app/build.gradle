apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def secretPropertiesFile = rootProject.file("secret.properties");
def secretProperties = new Properties();
secretProperties.load(new FileInputStream(secretPropertiesFile));

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "co.ello.android.ello"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "NINJA_CLIENT_KEY", secretProperties['NINJA_CLIENT_KEY']
        buildConfigField "String", "NINJA_CLIENT_SECRET", secretProperties['NINJA_CLIENT_SECRET']
        buildConfigField "String", "NINJA_DOMAIN", secretProperties['NINJA_DOMAIN']

        buildConfigField "String", "STAGE1_CLIENT_KEY", secretProperties['STAGE1_CLIENT_KEY']
        buildConfigField "String", "STAGE1_CLIENT_SECRET", secretProperties['STAGE1_CLIENT_SECRET']
        buildConfigField "String", "STAGE1_DOMAIN", secretProperties['STAGE1_DOMAIN']

        buildConfigField "String", "STAGE2_CLIENT_KEY", secretProperties['STAGE2_CLIENT_KEY']
        buildConfigField "String", "STAGE2_CLIENT_SECRET", secretProperties['STAGE2_CLIENT_SECRET']
        buildConfigField "String", "STAGE2_DOMAIN", secretProperties['STAGE2_DOMAIN']

        buildConfigField "String", "RAINBOW_CLIENT_KEY", secretProperties['RAINBOW_CLIENT_KEY']
        buildConfigField "String", "RAINBOW_CLIENT_SECRET", secretProperties['RAINBOW_CLIENT_SECRET']
        buildConfigField "String", "RAINBOW_DOMAIN", secretProperties['RAINBOW_DOMAIN']

        buildConfigField "String", "PROD_CLIENT_KEY", secretProperties['PROD_CLIENT_KEY']
        buildConfigField "String", "PROD_CLIENT_SECRET", secretProperties['PROD_CLIENT_SECRET']
        buildConfigField "String", "PROD_DOMAIN", secretProperties['PROD_DOMAIN']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api 'com.android.volley:volley:1.1.0'
    api 'com.google.code.gson:gson:2.8.2'
    api 'com.orhanobut:hawk:2.0.1'
    api 'com.squareup.picasso:picasso:2.71828'
    api 'com.android.support:recyclerview-v7:27.1.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.23.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:0.23.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
